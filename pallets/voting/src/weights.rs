
//! Autogenerated weights for pallet_voting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-17, STEPS: `10`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `pop-os`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --steps
// 10
// --template
// ./.mantain/template.hbs
// --repeat
// 20
// --extrinsic
// *
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --pallet
// pallet_voting
// --output
// ./pallets/voting/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_voting.
pub trait WeightInfo {
	fn register_voter() -> Weight;
	fn make_proposal() -> Weight;
	fn increase_proposal_time(x: u32, ) -> Weight;
	fn cancel_proposal(x: u32, ) -> Weight;
}

/// Weights for pallet_voting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Voting::RegisteredVoters` (r:1 w:1)
	/// Proof: `Voting::RegisteredVoters` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Voting::AmountVoters` (r:1 w:1)
	/// Proof: `Voting::AmountVoters` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn register_voter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3513`
		// Minimum execution time: 22_813_000 picoseconds.
		Weight::from_parts(23_276_000, 3513)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Voting::RegisteredVoters` (r:1 w:0)
	/// Proof: `Voting::RegisteredVoters` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Voting::ProposalCounter` (r:1 w:1)
	/// Proof: `Voting::ProposalCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Voting::Proposals` (r:0 w:1)
	/// Proof: `Voting::Proposals` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	fn make_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `3513`
		// Minimum execution time: 26_987_000 picoseconds.
		Weight::from_parts(27_949_000, 3513)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Voting::RegisteredVoters` (r:1 w:0)
	/// Proof: `Voting::RegisteredVoters` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Voting::Proposals` (r:1 w:1)
	/// Proof: `Voting::Proposals` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 10000]`.
	fn increase_proposal_time(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1303`
		//  Estimated: `3566`
		// Minimum execution time: 30_568_000 picoseconds.
		Weight::from_parts(55_483_886, 3566)
			// Standard Error: 332
			.saturating_add(Weight::from_parts(2_744, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Voting::Proposals` (r:1 w:1)
	/// Proof: `Voting::Proposals` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 10000]`.
	fn cancel_proposal(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1266`
		//  Estimated: `3566`
		// Minimum execution time: 25_731_000 picoseconds.
		Weight::from_parts(48_152_940, 3566)
			// Standard Error: 287
			.saturating_add(Weight::from_parts(2_652, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Voting::RegisteredVoters` (r:1 w:1)
	/// Proof: `Voting::RegisteredVoters` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Voting::AmountVoters` (r:1 w:1)
	/// Proof: `Voting::AmountVoters` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn register_voter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3513`
		// Minimum execution time: 22_813_000 picoseconds.
		Weight::from_parts(23_276_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Voting::RegisteredVoters` (r:1 w:0)
	/// Proof: `Voting::RegisteredVoters` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Voting::ProposalCounter` (r:1 w:1)
	/// Proof: `Voting::ProposalCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Voting::Proposals` (r:0 w:1)
	/// Proof: `Voting::Proposals` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	fn make_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `3513`
		// Minimum execution time: 26_987_000 picoseconds.
		Weight::from_parts(27_949_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Voting::RegisteredVoters` (r:1 w:0)
	/// Proof: `Voting::RegisteredVoters` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Voting::Proposals` (r:1 w:1)
	/// Proof: `Voting::Proposals` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 10000]`.
	fn increase_proposal_time(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1303`
		//  Estimated: `3566`
		// Minimum execution time: 30_568_000 picoseconds.
		Weight::from_parts(55_483_886, 3566)
			// Standard Error: 332
			.saturating_add(Weight::from_parts(2_744, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Voting::Proposals` (r:1 w:1)
	/// Proof: `Voting::Proposals` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 10000]`.
	fn cancel_proposal(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1266`
		//  Estimated: `3566`
		// Minimum execution time: 25_731_000 picoseconds.
		Weight::from_parts(48_152_940, 3566)
			// Standard Error: 287
			.saturating_add(Weight::from_parts(2_652, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}